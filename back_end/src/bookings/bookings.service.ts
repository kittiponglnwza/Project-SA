import { Injectable } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { Cron, CronExpression } from '@nestjs/schedule';
import { BookingStatus } from '@prisma/client'; // ‚úÖ ‡πÉ‡∏ä‡πâ enum ‡∏Ç‡∏≠‡∏á Prisma

@Injectable()
export class BookingsService {
  constructor(private prisma: PrismaService) {}

  @Cron(CronExpression.EVERY_MINUTE)
  private async updateExpiredBookings() {
    const now = new Date();

    // üîπ ‡∏´‡∏≤ booking ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á ACTIVE ‡πÅ‡∏ï‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    const expiredBookings = await this.prisma.booking.findMany({
      where: {
        status: BookingStatus.ACTIVE, // ‚úÖ ‡πÉ‡∏ä‡πâ enum
        endTime: { lt: now },
      },
    });

    for (const booking of expiredBookings) {
      await this.prisma.booking.update({
        where: { id: booking.id },
        data: { status: BookingStatus.COMPLETED }, // ‚úÖ ‡πÉ‡∏ä‡πâ enum
      });
    }

    if (expiredBookings.length > 0) {
      console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ${expiredBookings.length} booking ‡πÄ‡∏õ‡πá‡∏ô COMPLETED ‡πÅ‡∏•‡πâ‡∏ß`);
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á booking ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async findAll() {
    await this.updateExpiredBookings(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô
    return this.prisma.booking.findMany({
      include: { user: true, seat: true },
      orderBy: { date: 'desc' },
    });
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á booking ‡∏ï‡∏≤‡∏° user
  async findByUser(userId: number) {
    await this.updateExpiredBookings(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô
    return this.prisma.booking.findMany({
      where: { userId },
      include: { seat: true },
      orderBy: { date: 'desc' },
    });
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á booking
  async create(data: {
    userId: number;
    seatId: number;
    duration: number;
    price: number;
    startTime?: string;
    endTime?: string;
    paymentMethod?: string;
  }) {
    // ‡∏Å‡∏±‡∏ô‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥
    const existing = await this.prisma.booking.findFirst({
      where: { seatId: data.seatId, status: BookingStatus.ACTIVE }, // ‚úÖ enum
    });

    if (existing) {
      throw new Error('‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡∏≠‡∏∑‡πà‡∏ô');
    }

    // üü¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
    let startTime: Date | undefined = data.startTime ? new Date(data.startTime) : undefined;
    let endTime: Date | undefined = data.endTime ? new Date(data.endTime) : undefined;

    if (!endTime && startTime) {
      const end = new Date(startTime);
      end.setHours(end.getHours() + data.duration);
      endTime = end;
    }

    return this.prisma.booking.create({
      data: {
        userId: data.userId,
        seatId: data.seatId,
        duration: data.duration,
        price: data.price,
        status: BookingStatus.ACTIVE, // ‚úÖ default ‡πÄ‡∏õ‡πá‡∏ô ACTIVE
        startTime,
        endTime,
        paymentMethod: data.paymentMethod ?? 'cash',
      },
      include: { seat: true },
    });
  }

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ booking (‡πÄ‡∏ä‡πà‡∏ô cancel, complete)
  async updateStatus(id: number, status: BookingStatus) {
    return this.prisma.booking.update({
      where: { id },
      data: { status },
    });
  }
}
