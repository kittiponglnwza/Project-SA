generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SeatStatus {
  AVAILABLE     // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  UNAVAILABLE   // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
  MAINTENANCE   // ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°
}

model Seat {
  id        Int        @id @default(autoincrement())
  zone      String
  type      String
  status    SeatStatus @default(AVAILABLE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookings  Booking[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      String   @default("User")
  createdAt DateTime @default(now())

  bookings  Booking[]
}

enum BookingStatus {
  ACTIVE      // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  COMPLETED   // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
  CANCELLED   // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
}

model Booking {
  id            Int           @id @default(autoincrement())
  userId        Int
  seatId        Int
  date          DateTime      @default(now())
  duration      Int
  price         Int
  status        BookingStatus @default(ACTIVE)   // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô enum
  startTime     DateTime?
  endTime       DateTime?
  paymentMethod String?

  user User @relation(fields: [userId], references: [id])
  seat Seat @relation(fields: [seatId], references: [id])
}

